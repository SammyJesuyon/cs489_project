<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/db/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/db/models.py" />
              <option name="originalContent" value="# Refactored models.py to match the UML diagram (ads_uml.png)&#10;# app/db/models.py&#10;from enum import Enum as PyEnum&#10;from sqlalchemy import (&#10;    Column, Integer, String, Boolean, Date, Time, DateTime,&#10;    ForeignKey, Table, UniqueConstraint, Enum, func&#10;)&#10;from sqlalchemy.orm import relationship, declarative_base&#10;&#10;Base = declarative_base()&#10;&#10;# --- Many-to-many: User ↔ Role&#10;user_roles = Table(&#10;    &quot;user_roles&quot;,&#10;    Base.metadata,&#10;    Column(&quot;user_id&quot;, ForeignKey(&quot;users.id&quot;, ondelete=&quot;CASCADE&quot;), primary_key=True),&#10;    Column(&quot;role_id&quot;, ForeignKey(&quot;roles.id&quot;, ondelete=&quot;CASCADE&quot;), primary_key=True),&#10;)&#10;&#10;# --- Address ---&#10;class Address(Base):&#10;    __tablename__ = &quot;addresses&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    street = Column(String(120), nullable=False)&#10;    city = Column(String(60), nullable=False)&#10;    state = Column(String(30), nullable=False)&#10;    zip_code = Column(String(15), nullable=False)&#10;&#10;    patients = relationship(&quot;Patient&quot;, back_populates=&quot;address&quot;, lazy=&quot;selectin&quot;)&#10;    surgeries = relationship(&quot;Surgery&quot;, back_populates=&quot;address&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Address(id={self.id}, street='{self.street}', city='{self.city}')&gt;&quot;&#10;&#10;&#10;# --- Surgery ---&#10;class Surgery(Base):&#10;    __tablename__ = &quot;surgeries&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    surgery_no = Column(String(10), nullable=False, unique=True)&#10;    name = Column(String(120), nullable=False)&#10;    phone = Column(String(30))&#10;    address_id = Column(Integer, ForeignKey(&quot;addresses.id&quot;, ondelete=&quot;RESTRICT&quot;), unique=True)&#10;&#10;    address = relationship(&quot;Address&quot;, back_populates=&quot;surgeries&quot;, lazy=&quot;selectin&quot;)&#10;    dentists = relationship(&quot;Dentist&quot;, back_populates=&quot;surgery&quot;, lazy=&quot;selectin&quot;)&#10;    appointments = relationship(&quot;Appointment&quot;, back_populates=&quot;surgery&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Surgery(id={self.id}, surgery_no='{self.surgery_no}', name='{self.name}')&gt;&quot;&#10;&#10;&#10;# --- Patient ---&#10;class Patient(Base):&#10;    __tablename__ = &quot;patients&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    user_id = Column(Integer, ForeignKey(&quot;users.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=True)&#10;    patient_no = Column(String(20), nullable=False, unique=True)&#10;    first_name = Column(String(60), nullable=False)&#10;    last_name = Column(String(60), nullable=False)&#10;    phone = Column(String(30))&#10;    email = Column(String(120))&#10;    address_id = Column(Integer, ForeignKey(&quot;addresses.id&quot;, ondelete=&quot;SET NULL&quot;))&#10;&#10;    address = relationship(&quot;Address&quot;, back_populates=&quot;patients&quot;, lazy=&quot;selectin&quot;)&#10;    appointments = relationship(&quot;Appointment&quot;, back_populates=&quot;patient&quot;, lazy=&quot;selectin&quot;)&#10;    user = relationship(&quot;User&quot;, back_populates=&quot;patient&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Patient(id={self.id}, patient_no='{self.patient_no}', name='{self.first_name} {self.last_name}')&gt;&quot;&#10;&#10;&#10;# --- Dentist ---&#10;class Dentist(Base):&#10;    __tablename__ = &quot;dentists&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    user_id = Column(Integer, ForeignKey(&quot;users.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=True)&#10;    first_name = Column(String(60), nullable=False)&#10;    last_name = Column(String(60), nullable=False)&#10;    phone = Column(String(30))&#10;    email = Column(String(120))&#10;    specialization = Column(String(80))&#10;    surgery_id = Column(Integer, ForeignKey(&quot;surgeries.id&quot;, ondelete=&quot;SET NULL&quot;))&#10;&#10;    surgery = relationship(&quot;Surgery&quot;, back_populates=&quot;dentists&quot;, lazy=&quot;selectin&quot;)&#10;    appointments = relationship(&quot;Appointment&quot;, back_populates=&quot;dentist&quot;, lazy=&quot;selectin&quot;)&#10;    user = relationship(&quot;User&quot;, back_populates=&quot;dentist&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Dentist(id={self.id}, name='{self.first_name} {self.last_name}')&gt;&quot;&#10;&#10;&#10;# --- Appointment ---&#10;class AppointmentStatus(str, PyEnum):&#10;    BOOKED = &quot;BOOKED&quot;&#10;    CANCELLED = &quot;CANCELLED&quot;&#10;    COMPLETED = &quot;COMPLETED&quot;&#10;&#10;&#10;class Appointment(Base):&#10;    __tablename__ = &quot;appointments&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    appointment_date = Column(Date, nullable=False)&#10;    appointment_time = Column(Time, nullable=False)&#10;    status = Column(Enum(AppointmentStatus), default=AppointmentStatus.BOOKED, nullable=False)&#10;&#10;    patient_id = Column(Integer, ForeignKey(&quot;patients.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=False)&#10;    dentist_id = Column(Integer, ForeignKey(&quot;dentists.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=False)&#10;    surgery_id = Column(Integer, ForeignKey(&quot;surgeries.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=False)&#10;&#10;    patient = relationship(&quot;Patient&quot;, back_populates=&quot;appointments&quot;, lazy=&quot;selectin&quot;)&#10;    dentist = relationship(&quot;Dentist&quot;, back_populates=&quot;appointments&quot;, lazy=&quot;selectin&quot;)&#10;    surgery = relationship(&quot;Surgery&quot;, back_populates=&quot;appointments&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    __table_args__ = (&#10;        UniqueConstraint(&quot;dentist_id&quot;, &quot;appointment_date&quot;, &quot;appointment_time&quot;, name=&quot;uq_dentist_slot&quot;),&#10;    )&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Appointment(id={self.id}, date={self.appointment_date}, time={self.appointment_time}, status={self.status})&gt;&quot;&#10;&#10;&#10;# --- Security Models ---&#10;class RoleEnum(str, PyEnum):&#10;    ADMIN = &quot;ADMIN&quot;&#10;    DENTIST = &quot;DENTIST&quot;&#10;    PATIENT = &quot;PATIENT&quot;&#10;&#10;&#10;class User(Base):&#10;    __tablename__ = &quot;users&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    username = Column(String(60), nullable=False, unique=True)&#10;    email = Column(String(120), nullable=False, unique=True)&#10;    password_hash = Column(String(255), nullable=False)&#10;    enabled = Column(Boolean, default=True)&#10;    created_at = Column(DateTime, nullable=False, server_default=func.now())&#10;    updated_at = Column(DateTime, nullable=False, server_default=func.now(), onupdate=func.now())&#10;&#10;    roles = relationship(&quot;Role&quot;, secondary=user_roles, back_populates=&quot;users&quot;, lazy=&quot;selectin&quot;)&#10;    patient = relationship(&quot;Patient&quot;, back_populates=&quot;user&quot;, lazy=&quot;selectin&quot;)&#10;    dentist = relationship(&quot;Dentist&quot;, back_populates=&quot;user&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;User(id={self.id}, username='{self.username}', email='{self.email}', enabled={self.enabled})&gt;&quot;&#10;&#10;&#10;class Role(Base):&#10;    __tablename__ = &quot;roles&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    name = Column(String(40), nullable=False, unique=True)&#10;    created_at = Column(DateTime, nullable=False, server_default=func.now())&#10;    updated_at = Column(DateTime, nullable=False, server_default=func.now(), onupdate=func.now())&#10;&#10;    users = relationship(&quot;User&quot;, secondary=user_roles, back_populates=&quot;roles&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Role(id={self.id}, name='{self.name}')&gt;&quot;&#10;&#10;__all__ = [&#10;    &quot;Base&quot;, &quot;Address&quot;, &quot;Surgery&quot;, &quot;Patient&quot;, &quot;Dentist&quot;, &quot;Appointment&quot;, &quot;AppointmentStatus&quot;,&#10;    &quot;User&quot;, &quot;Role&quot;, &quot;RoleEnum&quot;, &quot;user_roles&quot;,&#10;]" />
              <option name="updatedContent" value="# Refactored models.py to match the UML diagram (ads_uml.png)&#10;# app/db/models.py&#10;from enum import Enum as PyEnum&#10;from sqlalchemy import (&#10;    Column, Integer, String, Boolean, Date, Time, DateTime,&#10;    ForeignKey, Table, UniqueConstraint, Enum, func&#10;)&#10;from sqlalchemy.orm import relationship, declarative_base&#10;&#10;Base = declarative_base()&#10;&#10;# --- Many-to-many: User ↔ Role&#10;user_roles = Table(&#10;    &quot;user_roles&quot;,&#10;    Base.metadata,&#10;    Column(&quot;user_id&quot;, ForeignKey(&quot;users.id&quot;, ondelete=&quot;CASCADE&quot;), primary_key=True),&#10;    Column(&quot;role_id&quot;, ForeignKey(&quot;roles.id&quot;, ondelete=&quot;CASCADE&quot;), primary_key=True),&#10;)&#10;&#10;# --- Address ---&#10;class Address(Base):&#10;    __tablename__ = &quot;addresses&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    street = Column(String(120), nullable=False)&#10;    city = Column(String(60), nullable=False)&#10;    state = Column(String(30), nullable=False)&#10;    zip_code = Column(String(15), nullable=False)&#10;&#10;    patients = relationship(&quot;Patient&quot;, back_populates=&quot;address&quot;, lazy=&quot;selectin&quot;)&#10;    surgeries = relationship(&quot;Surgery&quot;, back_populates=&quot;address&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Address(id={self.id}, street='{self.street}', city='{self.city}')&gt;&quot;&#10;&#10;&#10;# --- Surgery ---&#10;class Surgery(Base):&#10;    __tablename__ = &quot;surgeries&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    surgery_no = Column(String(10), nullable=False, unique=True)&#10;    name = Column(String(120), nullable=False)&#10;    phone = Column(String(30))&#10;    address_id = Column(Integer, ForeignKey(&quot;addresses.id&quot;, ondelete=&quot;RESTRICT&quot;), unique=True)&#10;&#10;    address = relationship(&quot;Address&quot;, back_populates=&quot;surgeries&quot;, lazy=&quot;selectin&quot;)&#10;    dentists = relationship(&quot;Dentist&quot;, back_populates=&quot;surgery&quot;, lazy=&quot;selectin&quot;)&#10;    appointments = relationship(&quot;Appointment&quot;, back_populates=&quot;surgery&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Surgery(id={self.id}, surgery_no='{self.surgery_no}', name='{self.name}')&gt;&quot;&#10;&#10;&#10;# --- Patient ---&#10;class Patient(Base):&#10;    __tablename__ = &quot;patients&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    user_id = Column(Integer, ForeignKey(&quot;users.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=True)&#10;    patient_no = Column(String(20), nullable=False, unique=True)&#10;    first_name = Column(String(60), nullable=False)&#10;    last_name = Column(String(60), nullable=False)&#10;    phone = Column(String(30))&#10;    email = Column(String(120))&#10;    address_id = Column(Integer, ForeignKey(&quot;addresses.id&quot;, ondelete=&quot;SET NULL&quot;))&#10;&#10;    address = relationship(&quot;Address&quot;, back_populates=&quot;patients&quot;, lazy=&quot;selectin&quot;)&#10;    appointments = relationship(&quot;Appointment&quot;, back_populates=&quot;patient&quot;, lazy=&quot;selectin&quot;)&#10;    user = relationship(&quot;User&quot;, back_populates=&quot;patient&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Patient(id={self.id}, patient_no='{self.patient_no}', name='{self.first_name} {self.last_name}')&gt;&quot;&#10;&#10;&#10;# --- Dentist ---&#10;class Dentist(Base):&#10;    __tablename__ = &quot;dentists&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    user_id = Column(Integer, ForeignKey(&quot;users.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=True)&#10;    first_name = Column(String(60), nullable=False)&#10;    last_name = Column(String(60), nullable=False)&#10;    phone = Column(String(30))&#10;    email = Column(String(120))&#10;    specialization = Column(String(80))&#10;    surgery_id = Column(Integer, ForeignKey(&quot;surgeries.id&quot;, ondelete=&quot;SET NULL&quot;))&#10;&#10;    surgery = relationship(&quot;Surgery&quot;, back_populates=&quot;dentists&quot;, lazy=&quot;selectin&quot;)&#10;    appointments = relationship(&quot;Appointment&quot;, back_populates=&quot;dentist&quot;, lazy=&quot;selectin&quot;)&#10;    user = relationship(&quot;User&quot;, back_populates=&quot;dentist&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Dentist(id={self.id}, name='{self.first_name} {self.last_name}')&gt;&quot;&#10;&#10;&#10;# --- Appointment ---&#10;class AppointmentStatus(str, PyEnum):&#10;    BOOKED = &quot;BOOKED&quot;&#10;    CANCELLED = &quot;CANCELLED&quot;&#10;    COMPLETED = &quot;COMPLETED&quot;&#10;&#10;&#10;class Appointment(Base):&#10;    __tablename__ = &quot;appointments&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    appointment_date = Column(Date, nullable=False)&#10;    appointment_time = Column(Time, nullable=False)&#10;    status = Column(Enum(AppointmentStatus), default=AppointmentStatus.BOOKED, nullable=False)&#10;&#10;    patient_id = Column(Integer, ForeignKey(&quot;patients.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=False)&#10;    dentist_id = Column(Integer, ForeignKey(&quot;dentists.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=False)&#10;    surgery_id = Column(Integer, ForeignKey(&quot;surgeries.id&quot;, ondelete=&quot;CASCADE&quot;), nullable=False)&#10;&#10;    patient = relationship(&quot;Patient&quot;, back_populates=&quot;appointments&quot;, lazy=&quot;selectin&quot;)&#10;    dentist = relationship(&quot;Dentist&quot;, back_populates=&quot;appointments&quot;, lazy=&quot;selectin&quot;)&#10;    surgery = relationship(&quot;Surgery&quot;, back_populates=&quot;appointments&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    __table_args__ = (&#10;        UniqueConstraint(&quot;dentist_id&quot;, &quot;appointment_date&quot;, &quot;appointment_time&quot;, name=&quot;uq_dentist_slot&quot;),&#10;    )&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Appointment(id={self.id}, date={self.appointment_date}, time={self.appointment_time}, status={self.status})&gt;&quot;&#10;&#10;&#10;# --- Security Models ---&#10;class RoleEnum(str, PyEnum):&#10;    ADMIN = &quot;ADMIN&quot;&#10;    DENTIST = &quot;DENTIST&quot;&#10;    PATIENT = &quot;PATIENT&quot;&#10;&#10;&#10;class User(Base):&#10;    __tablename__ = &quot;users&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    username = Column(String(60), nullable=False, unique=True)&#10;    email = Column(String(120), nullable=False, unique=True)&#10;    password_hash = Column(String(255), nullable=False)&#10;    enabled = Column(Boolean, default=True)&#10;    created_at = Column(DateTime, nullable=False, server_default=func.now())&#10;    updated_at = Column(DateTime, nullable=False, server_default=func.now(), onupdate=func.now())&#10;&#10;    roles = relationship(&quot;Role&quot;, secondary=user_roles, back_populates=&quot;users&quot;, lazy=&quot;selectin&quot;)&#10;    patient = relationship(&quot;Patient&quot;, back_populates=&quot;user&quot;, lazy=&quot;selectin&quot;)&#10;    dentist = relationship(&quot;Dentist&quot;, back_populates=&quot;user&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;User(id={self.id}, username='{self.username}', email='{self.email}', enabled={self.enabled})&gt;&quot;&#10;&#10;&#10;class Role(Base):&#10;    __tablename__ = &quot;roles&quot;&#10;&#10;    id = Column(Integer, primary_key=True, autoincrement=True)&#10;    name = Column(String(40), nullable=False, unique=True)&#10;    created_at = Column(DateTime, nullable=False, server_default=func.now())&#10;    updated_at = Column(DateTime, nullable=False, server_default=func.now(), onupdate=func.now())&#10;&#10;    users = relationship(&quot;User&quot;, secondary=user_roles, back_populates=&quot;roles&quot;, lazy=&quot;selectin&quot;)&#10;&#10;    def __repr__(self):&#10;        return f&quot;&lt;Role(id={self.id}, name='{self.name}')&gt;&quot;&#10;&#10;__all__ = [&#10;    &quot;Base&quot;, &quot;Address&quot;, &quot;Surgery&quot;, &quot;Patient&quot;, &quot;Dentist&quot;, &quot;Appointment&quot;, &quot;AppointmentStatus&quot;,&#10;    &quot;User&quot;, &quot;Role&quot;, &quot;RoleEnum&quot;, &quot;user_roles&quot;,&#10;]" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>